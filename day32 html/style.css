/* 1 */
table{
    border-collapse: collapse; /* collapse-ის გამოყენებით ცხრილში დაშორებული ხაზები ერთმანეთს შეუერთდება,separate კი მისი საპირისპიროა */
    width: 100%;
}

td, th{
    border: 1px solid black;
    padding: 10px; /* padding-ი კონტენტსა და ბორდერს შორის გამოყოფს სივრცეს და ზრდის ცხრილის ზომას */
    text-align: center;
}

/* 2 */
/* padding-ი ელემენტს აშორებს შიდა სივრცეში */
.div1{    
    width: 200px;
    height: 200px;
    background-color: blue;
    border-width: 10px; /* border-ის გარშემორტყმული ზოლის ზომა */
    border-style: solid;
    border-color: black;
    /* border: 10px solid black; იგივე კოდი ერთ ხაზში,ეს არის shortand-ი */
    padding: 50px; /* padding-ი ნისნავს რომ ყველა მხრიდან მივანიჭეთ ჩვენთვის სასურველი ზომა */
    /* იგივეა რაც:
    padding-top: ;
    padding-right: ;
    padding-bottom: ;
    padding-left: ; */

    /* padding-ს გამოიყენება იმისათვის რომ კონტენტსა და ბორდერს შორის მოვახდინოთ დაშორება */
    padding-top: 30px; /* მაღლიდან დაშორება */
    padding-right: 15px; /* მარჯვნივ დაშორება */
    padding-bottom: 20px;
    padding-left: 50px; /* მარცხნივ დაშორება */
    padding: 30px 15px 50px 20px; /* იგივე კოდი დავწერეთ ერთ ხაზში */

}

/* 3 */
.parent1{
    box-sizing: border-box; /* box-sizing-ის გამოყენებით box ელემენტს ვაფიქსირებთ რათა შვილობილი ელემნტის მოძრაობის დროს ის არ გადაადგილდეს */
    padding: 50px; /* რომ დავწეროთ padding: 50px; შვილობილი ელემენტი გადაადგილდება 50px-ით და მშობელი ელემენტი ისევ თავის ადგილზე დარჩება */
    /* padding-ი ელემენტს გადაადგილებას უკეთებს შიგნით */

    width: 200px;
    height: 200px;
    background-color: blue;
    border: 10px solid black;
    padding-top: 20px; /* მშობელი ელემენტი მაღლიდან ჩამოვიდა 20px-ით */
    padding-left: 50px; /* მშობელი ელემენტი მარცხნიდან წავიდა 50px-ით */
}

.child1{
    width: 100px;
    height: 100px;
    background-color: brown;
    border-radius: 50%; /* შვილი ელემენტი დავამრგვალეთ 50px-ით */
}

/* 4 */
/* margin-ი ელემენტს აშორებს გარე სივრცეში */
.parent2{
    width: 200px;
    height: 200px;
    background-color: blue;
    border: 10px solid black;

    margin: 50px; /* margin-ის გამოყენებით მშობელი ელემენტი ყველა მხრიდან დაშორდა 50px-ით */
    margin-bottom: 50px; /* margin-bottom-ის გამოყენებით მხოლოდ ორ ელემენტს შორის მოხდა დაშორება 50px-ით */
    /* იგივეა რაც: 
    margin-top
    margin-right
    margin-bottom
    margin-left*/
}

.child2{
    width: 200px;
    height: 200px;
    background-color: brown;
    border: 10px solid black;
}

/* 5 */
/* ფიფქი ყველა ელემენტზე ახდენს ზეგავლენას html-ში, */
/* html-ში ყველა ელემენტს მივეცით წითელი ფერი ფიფქის გამოყენებით */
*{
    color: red;
}

/* 6 */
/* padding: 0px; margin: 0px; გამოყენების დროს div ელემენტი კედელთან მივიყვანეთ დაშორებებეის გარეშე */
*{
    padding: 0;
    margin: 0;
    box-sizing: border-box;
}

.div1{
    width: 200px;
    height: 200px;
    background-color: blue;
    border: 10px solid black;
}

/* 7 */
table{
    border-collapse: collapse;
    width: 100%;
}

td, th{
    border: 1px solid black;
    padding: 10px;
    text-align: center;
}

th{
    background-color:#6b0b0b;
}

td{
    background-color: green;
    padding: 20px;
}

tr:nth-child(3){ /* tr:nth-child(3) გამოყენებით tr-ის მესამე რიგი გავაფერადეთ წითლად */
    background-color: red; 
}

tr:nth-child(2){ /* tr:nth-child(2) გამოყენებით tr-ის მეორე რიგი გავაფერადეთ ლურჯად */
    background-color: blue; 
}

tr:nth-child(even) { /* table-ში ყველა რიგით ლუწი უჯდა გავაფერადეთ ლურჯად */
    background-color: blue;
}

tr:nth-child(odd) {
    background-color: red; /* table-ში ყველა კენტი უჯრა გავაფერადეთ წითლად */
}

/* 8 */
p:nth-child(2) { /* html-ში მეორე <p> თეგი გავაფერადეთ წითლად */
    color: red;
}